services:
  mysql:
    extends:
      file: ./services/mysql/docker-compose.yml
      service: mysql
    networks:
      - bigdata_network  # Use environment variable for the network
    volumes:
      - mysql-data:/var/lib/mysql

  postgres:
    extends:
      file: ./services/postgres/docker-compose.yml
      service: postgres
    networks:
      - bigdata_network  # Use environment variable for the network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  spark-master:
    extends:
      file: ./services/spark/docker-compose.yml
      service: spark-master
    networks:
      - bigdata_network
    volumes:
      - spark-data:/opt/spark/logs
      - spark-logs:/var/log/spark
      - delta-storage:/opt/spark/storage/delta

  spark-worker:
    extends:
      file: ./services/spark/docker-compose.yml
      service: spark-worker
    networks:
      - bigdata_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    volumes:
      - spark-data:/opt/spark/logs
      - spark-logs:/var/log/spark

  neo4j:
    extends:
      file: ./services/neo4j/docker-compose.yml
      service: neo4j
    networks:
      - bigdata_network


networks:
  bigdata_network:  # Define the network at the root level
    driver: bridge

volumes:
  mysql-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MYSQL_MOUNT_LOCATION}
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_MOUNT_LOCATION}
  spark-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SPARK_MOUNT_LOCATION}
  spark-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SPARK_LOGS_MOUNT_LOCATION}
  delta-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DELTA_LAKE_STORAGE_LOCATION}
  neo4j-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NEO4J_MOUNT_LOCATION}
  neo4j-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NEO4J_LOGS_MOUNT_LOCATION}
  neo4j-plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NEO4J_PLUGINS_MOUNT_LOCATION}
  neo4j-imports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NEO4J_IMPORTS_MOUNT_LOCATION}

secrets:
  mysql_root_password:
    file: ./services/mysql/secrets/mysql_root_password.txt
  mysql_user_password:
    file: ./services/mysql/secrets/mysql_user_password.txt
  mysql_readonly_password:
    file: ./services/mysql/secrets/mysql_readonly_password.txt
  postgres_user_password:
    file: ./services/postgres/secrets/postgres_user_password.txt
  postgres_readonly_password:
    file: ./services/postgres/secrets/postgres_readonly_password.txt